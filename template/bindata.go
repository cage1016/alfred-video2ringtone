// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/get_title_and_url.js.tmpl (937B)
// tmpl/support_sites.json.tmpl (475B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplGet_title_and_urlJsTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\x4d\x6b\xdb\x4c\x10\xc7\xef\xfa\x14\xf3\xf0\x1c\x56\x22\xad\x9c\x73\x21\x85\x26\x98\x42\xa1\xb4\xe0\xd2\x50\x5c\x23\x46\xd2\x38\x5e\x2a\xed\x2c\x33\xb3\x12\x21\xf8\xbb\x17\x39\x4e\x5d\xbf\x1c\x0a\x3d\xf4\x36\xd2\x0c\xbf\xff\x8b\xf4\xff\x7f\xb3\xa4\x32\xab\x7d\x98\xb1\xa2\x36\xe2\xa3\xc1\xeb\x0e\x3e\xe0\x80\x8b\xdd\x53\x96\x35\x1c\xd4\x60\x2d\x1c\xac\x67\xb5\x0a\x63\xac\x02\xf6\x04\x37\xf0\x2e\xc6\xce\x37\x68\x9e\x43\xee\x16\x8f\x6a\xd4\xc3\x7c\xa0\x60\xea\x8a\x12\x0f\xcb\xcf\xc2\x0d\xa9\x92\x96\xe3\x86\x84\xf2\xa7\x03\xee\x0d\x98\x24\x82\x6d\x51\x4e\xcc\xbc\x58\x5e\xaf\x2e\x29\x9e\x88\x9d\xbb\x29\x5e\x8c\x36\x1b\xe1\xde\xa7\xbe\x1a\x50\x3c\x06\x53\xb8\x81\xa5\x7b\xcf\xfc\xd0\x11\xdc\x4d\x4b\x72\xaf\xc0\xdd\xed\xcf\xa6\xf9\x53\x24\xc1\x69\xf8\xea\x07\xec\x5a\x3f\x8d\xb7\x82\x03\xc1\xad\xf0\xa8\x24\xd3\x8b\x8f\xbe\x11\x56\x5e\x1b\xcc\xdb\x07\x72\x2f\x2e\x47\xaa\x7f\x78\x3b\x16\x5b\xe0\x1a\x65\x47\xb9\xdf\x6d\xdd\x2a\xcb\xfc\x1a\xf2\x33\x6b\xa5\x72\x4f\xf9\xa1\xd0\xb7\x17\x6a\x2e\xd5\x50\x4c\xef\xbd\x6d\x7e\x5d\x16\x45\x01\x4f\x19\x00\xc0\x80\x02\x4d\x12\xa1\x60\x95\x61\x5d\x99\xb7\x6e\xfa\x32\x47\x9c\x72\xf4\xa1\xe5\x51\x97\xd7\xab\x12\x1b\xf3\x03\x7d\xc1\x7a\xdf\xf7\x45\x4a\x92\xee\xcf\x18\x49\xba\xbc\xc8\xb6\x40\x9d\x12\x4c\x11\x4f\xea\xf8\x07\x01\xf7\xc7\x7f\x97\xf0\x37\xc8\x51\xc4\x67\x4f\xb6\x11\x1e\x21\xd0\x08\x73\x11\x96\xdc\x7d\xe3\x04\x81\xa8\x05\x04\x4d\x31\xb2\x18\xb5\x50\x3f\xff\x3b\x80\x0a\x8f\x9c\xe4\x20\x06\x18\xa3\x2b\xb2\x6d\x96\x9d\x3a\xba\x02\xf7\x3d\x38\xb8\x3a\x4f\xfc\x33\x00\x00\xff\xff\x85\x1c\x14\x03\xa9\x03\x00\x00"

func tmplGet_title_and_urlJsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGet_title_and_urlJsTmpl,
		"tmpl/get_title_and_url.js.tmpl",
	)
}

func tmplGet_title_and_urlJsTmpl() (*asset, error) {
	bytes, err := tmplGet_title_and_urlJsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/get_title_and_url.js.tmpl", size: 937, mode: os.FileMode(0644), modTime: time.Unix(1693137668, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0x7b, 0x8c, 0x7f, 0x82, 0x2f, 0x63, 0x30, 0x77, 0x70, 0xc8, 0x49, 0x76, 0xe2, 0x29, 0x28, 0x2f, 0x26, 0x69, 0x6b, 0xe8, 0x31, 0xaa, 0x2b, 0x4c, 0xe8, 0x16, 0xeb, 0x28, 0x1e, 0xdc, 0x3e}}
	return a, nil
}

var _tmplSupport_sitesJsonTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xdd\x0a\x82\x30\x14\x07\xf0\x7b\x9f\x62\xec\x4a\x49\x9c\x74\xd1\xc5\x20\x7c\x10\x8f\x85\x1f\x23\x07\xea\xc4\x6d\xae\x30\xdf\x3d\x26\xcb\x0a\xa2\x70\x30\x38\x9c\x73\xfe\x9c\xdf\xe4\x21\x84\x10\x96\xba\xef\xc5\xa0\xce\x92\x2b\x26\x31\x45\xe9\xd2\xb6\x6f\x5a\xab\x65\xb1\xcb\x5b\x86\x29\xc2\x37\xa1\x95\x2e\x18\x0e\x3f\xc7\x03\xbb\xb0\xab\x9d\xfb\x09\xad\x95\xea\x25\x05\x20\x00\xc4\x18\x03\x10\x05\x89\x8b\x01\x44\xa5\x68\x89\xc9\x55\x59\x03\x24\xe3\xd1\x4f\x4f\xa0\xe3\x78\x7f\xc8\x76\xc1\xfd\x57\x16\x20\x2a\x18\x79\x5f\xc7\xab\x60\x0e\xff\xa9\x0b\xde\x70\xfb\xb7\xb2\x9f\x39\xe7\x1e\x79\xc5\x84\x45\x90\x8d\xf7\xa5\xd0\x5d\x55\x36\x42\x57\x5b\x05\xaf\xa4\x33\xb8\xeb\x5f\x14\x4b\x95\x79\xf3\x23\x00\x00\xff\xff\xa3\x82\x47\x31\xdb\x01\x00\x00"

func tmplSupport_sitesJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplSupport_sitesJsonTmpl,
		"tmpl/support_sites.json.tmpl",
	)
}

func tmplSupport_sitesJsonTmpl() (*asset, error) {
	bytes, err := tmplSupport_sitesJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/support_sites.json.tmpl", size: 475, mode: os.FileMode(0644), modTime: time.Unix(1693622397, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xf0, 0x9c, 0x7f, 0x5a, 0x14, 0x2, 0x5f, 0xd7, 0x1a, 0xcf, 0xbc, 0x0, 0xf2, 0x10, 0x7c, 0x10, 0x82, 0xd8, 0x6f, 0xc3, 0x5b, 0x73, 0x35, 0x4b, 0x60, 0x81, 0xe1, 0x24, 0xfb, 0x68, 0x17}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/get_title_and_url.js.tmpl": tmplGet_title_and_urlJsTmpl,
	"tmpl/support_sites.json.tmpl":   tmplSupport_sitesJsonTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": {nil, map[string]*bintree{
		"get_title_and_url.js.tmpl": {tmplGet_title_and_urlJsTmpl, map[string]*bintree{}},
		"support_sites.json.tmpl":   {tmplSupport_sitesJsonTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
